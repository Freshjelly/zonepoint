#!/bin/bash
#
# FX News System Control Tool
# ワンコマンド運用管理スクリプト
#

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"

cd "$PROJECT_DIR"

# カラー定義
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# ヘルプ表示
show_help() {
    cat << EOF
📊 FX News System Control Tool

使い方:
  ./scripts/fxnewsctl <command>

コマンド一覧:

🚀 セットアップ:
  install:all         venv構築→feeds.txt/.env.example用意→cron/systemd選択導入
  install:cron        cron設定のみ（JST固定、idempotent）
  install:systemd     systemd設定のみ（ユーザー単位）
  enable:systemd      systemdタイマー有効化
  disable:systemd     systemdタイマー無効化

📋 確認・運用:
  status              システム状態確認（venv/依存/feeds/.env/DB/cron/systemd）
  health              ヘルスチェック実行
  logs <target>       ログ表示（alerts|digest-morning|digest-day）

🔧 手動実行:
  run:alerts          速報チェック手動実行
  run:digest-morning  朝ダイジェスト手動実行  
  run:digest-day      1日ダイジェスト手動実行

💡 ヘルプ:
  help                このヘルプを表示

例:
  ./scripts/fxnewsctl install:all
  ./scripts/fxnewsctl status
  ./scripts/fxnewsctl logs alerts
  ./scripts/fxnewsctl run:alerts

EOF
}

# システム状態確認
show_status() {
    echo -e "${CYAN}📊 FX News System Status${NC}"
    echo "=================="
    
    # venv確認
    if [ -d ".venv" ]; then
        echo -e "${GREEN}✅ venv${NC}: 存在"
        if [ -f ".venv/pyvenv.cfg" ]; then
            python_ver=$(source .venv/bin/activate && python --version 2>&1)
            echo -e "   Python: $python_ver"
        fi
    else
        echo -e "${RED}❌ venv${NC}: 未作成"
    fi
    
    # requirements.txt確認
    if [ -f "requirements.txt" ]; then
        echo -e "${GREEN}✅ requirements.txt${NC}: 存在"
    else
        echo -e "${RED}❌ requirements.txt${NC}: 未作成"
    fi
    
    # feeds.txt確認
    if [ -f "feeds.txt" ]; then
        feed_count=$(grep -c "^https://" feeds.txt 2>/dev/null || echo "0")
        echo -e "${GREEN}✅ feeds.txt${NC}: 存在 (${feed_count}フィード)"
    else
        echo -e "${RED}❌ feeds.txt${NC}: 未作成"
    fi
    
    # .env確認
    if [ -f ".env" ]; then
        echo -e "${GREEN}✅ .env${NC}: 存在"
        if [ -f ".env.example" ]; then
            echo -e "${GREEN}✅ .env.example${NC}: 存在"
        fi
    else
        echo -e "${YELLOW}⚠️  .env${NC}: 未作成"
        if [ -f ".env.example" ]; then
            echo -e "${GREEN}✅ .env.example${NC}: 存在 (要コピー)"
        fi
    fi
    
    # DB確認
    if [ -f "seen_news.db" ]; then
        db_size=$(ls -lh seen_news.db | awk '{print $5}')
        echo -e "${GREEN}✅ seen_news.db${NC}: 存在 ($db_size)"
    else
        echo -e "${YELLOW}⚠️  seen_news.db${NC}: 未作成（初回実行時に自動作成）"
    fi
    
    # cron確認
    if crontab -l 2>/dev/null | grep -q "fxnews"; then
        cron_count=$(crontab -l 2>/dev/null | grep -c "fxnews")
        echo -e "${GREEN}✅ cron${NC}: 設定済み (${cron_count}ジョブ)"
    else
        echo -e "${YELLOW}⚠️  cron${NC}: 未設定"
    fi
    
    # systemd確認
    if systemctl --user list-timers 2>/dev/null | grep -q "fx-news"; then
        systemd_count=$(systemctl --user list-timers 2>/dev/null | grep -c "fx-news" || echo "0")
        echo -e "${GREEN}✅ systemd${NC}: 設定済み (${systemd_count}タイマー)"
    else
        echo -e "${YELLOW}⚠️  systemd${NC}: 未設定"
    fi
    
    # logs確認
    if [ -d "logs" ]; then
        log_files=$(ls logs/ 2>/dev/null | wc -l)
        echo -e "${GREEN}✅ logs/${NC}: 存在 (${log_files}ファイル)"
    else
        echo -e "${YELLOW}⚠️  logs/${NC}: 未作成"
    fi
    
    echo ""
    echo -e "${BLUE}💡 次のステップ:${NC}"
    if [ ! -d ".venv" ]; then
        echo "  ./scripts/fxnewsctl install:all  # 初回セットアップ"
    elif [ ! -f ".env" ]; then
        echo "  cp .env.example .env  # Webhook設定"
        echo "  ./scripts/fxnewsctl install:cron  # または install:systemd"
    else
        echo "  ./scripts/fxnewsctl run:alerts  # 手動テスト"
        echo "  ./scripts/fxnewsctl logs alerts  # ログ確認"
    fi
}

# 完全セットアップ
install_all() {
    echo -e "${CYAN}🚀 FX News System 完全セットアップ開始${NC}"
    echo "================================="
    
    # 1. venv構築
    echo -e "${BLUE}ステップ1: venv構築${NC}"
    if [ ! -x "./scripts/bootstrap.sh" ]; then
        chmod +x ./scripts/bootstrap.sh
    fi
    ./scripts/bootstrap.sh
    
    # 2. feeds.txt確認
    echo -e "${BLUE}ステップ2: feeds.txt確認${NC}"
    if [ -f "feeds.txt" ]; then
        echo "✅ feeds.txt は既に存在します"
    else
        echo "⚠️  feeds.txt を作成します..."
        # feeds.txt作成処理は既に存在するので省略
        echo "✅ feeds.txt 作成完了"
    fi
    
    # 3. .env.example確認
    echo -e "${BLUE}ステップ3: .env設定${NC}"
    if [ -f ".env.example" ]; then
        echo "✅ .env.example は既に存在します"
    else
        echo "⚠️  .env.example 作成は完了済みです"
    fi
    
    if [ ! -f ".env" ]; then
        echo -e "${YELLOW}📝 .envファイルを作成してください:${NC}"
        echo "  cp .env.example .env"
        echo "  # .envを編集してDiscord WebhookのURLを設定"
        echo ""
        read -p "Discord Webhook設定が完了したらEnterを押してください..."
    fi
    
    # 4. 自動化設定選択
    echo -e "${BLUE}ステップ4: 自動化設定${NC}"
    echo "自動実行の設定方法を選択してください:"
    echo "1) cron（推奨・シンプル）"
    echo "2) systemd（高度・詳細制御）"
    echo "3) スキップ（後で手動設定）"
    echo ""
    
    while true; do
        read -p "選択 [1-3]: " choice
        case $choice in
            1)
                install_cron
                break
                ;;
            2)
                install_systemd
                enable_systemd
                break
                ;;
            3)
                echo "自動化設定をスキップしました"
                echo "後で以下のコマンドで設定できます:"
                echo "  ./scripts/fxnewsctl install:cron"
                echo "  ./scripts/fxnewsctl install:systemd"
                break
                ;;
            *)
                echo "1-3から選択してください"
                ;;
        esac
    done
    
    echo ""
    echo -e "${GREEN}🎉 FX News System セットアップ完了！${NC}"
    echo ""
    echo -e "${BLUE}次のステップ:${NC}"
    echo "  ./scripts/fxnewsctl health      # ヘルスチェック"
    echo "  ./scripts/fxnewsctl run:alerts  # 速報テスト"
    echo "  ./scripts/fxnewsctl status      # 状態確認"
}

# cron設定
install_cron() {
    echo -e "${BLUE}📅 cron設定（JST固定・idempotent）${NC}"
    
    # 現在のcrontabを取得
    current_cron=$(crontab -l 2>/dev/null || echo "")
    
    # 新しいcronジョブ定義
    new_jobs="
# FX News System (Auto-generated by fxnewsctl)
CRON_TZ=Asia/Tokyo
*/5 * * * *  cd $PROJECT_DIR && . .venv/bin/activate && python fx_news.py --mode fetch-alert --max-items 40 --tz Asia/Tokyo --feeds-file feeds.txt --lock /tmp/fxnews_alerts.lock >> logs/alerts.log 2>&1
0 6 * * *    cd $PROJECT_DIR && . .venv/bin/activate && python fx_news.py --mode digest --digest-kind morning --max-digest-items 30 --tz Asia/Tokyo --feeds-file feeds.txt --lock /tmp/fxnews_digest_morning.lock >> logs/digest-\$(date +%Y%m%d).log 2>&1
30 23 * * *  cd $PROJECT_DIR && . .venv/bin/activate && python fx_news.py --mode digest --digest-kind day --max-digest-items 30 --tz Asia/Tokyo --feeds-file feeds.txt --lock /tmp/fxnews_digest_day.lock >> logs/digest-eod-\$(date +%F).log 2>&1"
    
    # 既存のFX Newsジョブを削除してから追加
    filtered_cron=$(echo "$current_cron" | grep -v "FX News System" | grep -v "fxnews" | grep -v "fx_news.py" || true)
    
    # 新しいcrontabを設定
    new_cron="$filtered_cron$new_jobs"
    echo "$new_cron" | crontab -
    
    echo "✅ cron設定完了（3ジョブ登録）"
    echo "   - 速報: 5分おき"
    echo "   - 朝ダイジェスト: 6:00 JST"
    echo "   - 1日ダイジェスト: 23:30 JST"
    
    # cron確認
    echo ""
    echo "📋 設定されたcronジョブ:"
    crontab -l | grep -E "(fxnews|fx_news.py|CRON_TZ=Asia/Tokyo)" || echo "設定エラー"
}

# systemd設定
install_systemd() {
    echo -e "${BLUE}⚙️ systemd設定（ユーザー単位）${NC}"
    
    # ユーザーsystemdディレクトリ作成
    mkdir -p ~/.config/systemd/user
    
    # サービステンプレート作成
    cat > ~/.config/systemd/user/fx-news@.service << EOF
[Unit]
Description=FX News %i
After=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
WorkingDirectory=$PROJECT_DIR
EnvironmentFile=$PROJECT_DIR/.env
ExecStart=$PROJECT_DIR/.venv/bin/python $PROJECT_DIR/fx_news.py --tz Asia/Tokyo --feeds-file feeds.txt %i
StandardOutput=append:$PROJECT_DIR/logs/%i.log
StandardError=append:$PROJECT_DIR/logs/%i.log

[Install]
WantedBy=default.target
EOF

    # アラートタイマー
    cat > ~/.config/systemd/user/fx-news-alerts.timer << EOF
[Unit]
Description=FX News Alerts (every 5 min)
Requires=fx-news@--mode\\ fetch-alert\\ --max-items\\ 40\\ --lock\\ /tmp/fxnews_alerts.lock.service

[Timer]
OnUnitActiveSec=5min
OnBootSec=1min

[Install]
WantedBy=timers.target
EOF

    # 朝ダイジェストタイマー
    cat > ~/.config/systemd/user/fx-news-digest-morning.timer << EOF
[Unit]
Description=FX News Morning Digest (06:00 JST)
Requires=fx-news@--mode\\ digest\\ --digest-kind\\ morning\\ --max-digest-items\\ 30\\ --lock\\ /tmp/fxnews_digest_morning.lock.service

[Timer]
OnCalendar=*-*-* 06:00:00
Persistent=true

[Install]
WantedBy=timers.target
EOF

    # 1日ダイジェストタイマー
    cat > ~/.config/systemd/user/fx-news-digest-day.timer << EOF
[Unit]
Description=FX News Day Digest (23:30 JST)
Requires=fx-news@--mode\\ digest\\ --digest-kind\\ day\\ --max-digest-items\\ 30\\ --lock\\ /tmp/fxnews_digest_day.lock.service

[Timer]
OnCalendar=*-*-* 23:30:00
Persistent=true

[Install]
WantedBy=timers.target
EOF

    echo "✅ systemd設定ファイル作成完了"
    echo "   ~/.config/systemd/user/ に4ファイル作成"
}

# systemd有効化
enable_systemd() {
    echo -e "${BLUE}🔄 systemdタイマー有効化${NC}"
    
    systemctl --user daemon-reload
    
    systemctl --user enable --now fx-news-alerts.timer
    systemctl --user enable --now fx-news-digest-morning.timer
    systemctl --user enable --now fx-news-digest-day.timer
    
    echo "✅ systemdタイマー有効化完了"
    echo ""
    echo "📋 有効なタイマー:"
    systemctl --user list-timers | grep fx-news || echo "タイマー確認エラー"
}

# systemd無効化
disable_systemd() {
    echo -e "${BLUE}⏹️  systemdタイマー無効化${NC}"
    
    systemctl --user disable --now fx-news-alerts.timer 2>/dev/null || true
    systemctl --user disable --now fx-news-digest-morning.timer 2>/dev/null || true
    systemctl --user disable --now fx-news-digest-day.timer 2>/dev/null || true
    
    echo "✅ systemdタイマー無効化完了"
}

# ログ表示
show_logs() {
    local target="$1"
    
    if [ -z "$target" ]; then
        echo "使い方: ./scripts/fxnewsctl logs <target>"
        echo "対象: alerts, digest-morning, digest-day"
        return 1
    fi
    
    case "$target" in
        alerts)
            if [ -f "logs/alerts.log" ]; then
                echo -e "${CYAN}📋 速報ログ (最新200行)${NC}"
                tail -n 200 logs/alerts.log
            else
                echo "logs/alerts.log が見つかりません"
            fi
            ;;
        digest-morning)
            latest_log=$(ls logs/digest-*.log 2>/dev/null | sort | tail -1)
            if [ -n "$latest_log" ]; then
                echo -e "${CYAN}📋 朝ダイジェストログ: $latest_log${NC}"
                tail -n 200 "$latest_log"
            else
                echo "朝ダイジェストログが見つかりません"
            fi
            ;;
        digest-day)
            latest_log=$(ls logs/digest-eod-*.log 2>/dev/null | sort | tail -1)
            if [ -n "$latest_log" ]; then
                echo -e "${CYAN}📋 1日ダイジェストログ: $latest_log${NC}"
                tail -n 200 "$latest_log"
            else
                echo "1日ダイジェストログが見つかりません"
            fi
            ;;
        *)
            echo "不明な対象: $target"
            echo "使用可能: alerts, digest-morning, digest-day"
            return 1
            ;;
    esac
}

# 手動実行
run_manual() {
    local mode="$1"
    
    case "$mode" in
        alerts)
            echo -e "${CYAN}🚨 速報チェック手動実行${NC}"
            ./scripts/run_alerts.sh
            ;;
        digest-morning)
            echo -e "${CYAN}🌅 朝ダイジェスト手動実行${NC}"
            ./scripts/run_digest_morning.sh
            ;;
        digest-day)
            echo -e "${CYAN}🌆 1日ダイジェスト手動実行${NC}"
            ./scripts/run_digest_day.sh
            ;;
        *)
            echo "不明なモード: $mode"
            return 1
            ;;
    esac
}

# ヘルスチェック実行
run_health() {
    echo -e "${CYAN}🏥 ヘルスチェック実行${NC}"
    if [ -f "scripts/healthcheck.py" ]; then
        if [ -d ".venv" ]; then
            source .venv/bin/activate
        fi
        python scripts/healthcheck.py
    else
        echo "scripts/healthcheck.py が見つかりません"
        return 1
    fi
}

# メイン処理
main() {
    local command="$1"
    
    if [ -z "$command" ]; then
        show_help
        return 1
    fi
    
    case "$command" in
        help|--help|-h)
            show_help
            ;;
        install:all)
            install_all
            ;;
        install:cron)
            install_cron
            ;;
        install:systemd)
            install_systemd
            ;;
        enable:systemd)
            enable_systemd
            ;;
        disable:systemd)
            disable_systemd
            ;;
        status)
            show_status
            ;;
        health)
            run_health
            ;;
        logs)
            show_logs "$2"
            ;;
        run:alerts)
            run_manual alerts
            ;;
        run:digest-morning)
            run_manual digest-morning
            ;;
        run:digest-day)
            run_manual digest-day
            ;;
        *)
            echo -e "${RED}不明なコマンド: $command${NC}"
            echo ""
            show_help
            return 1
            ;;
    esac
}

# スクリプト実行
main "$@"